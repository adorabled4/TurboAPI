host: 192.168.159.134
spring:
  application:
    name: api-core
  datasource:
    url: jdbc:mysql://${host}:3306/api-platform
    password: root
    username: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    # Redis服务器连接端口
    host: ${host}
    password: adorabled4
    # Redis数据库索引（默认为0）
    database: 1
    port: 6379
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 200
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0
  rabbitmq:
    username: dhx
    password: qwer
    host: ${host}
    port: 5672 # 端口
    virtual-host: / # 虚拟主机
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  freemarker:
    charset: UTF-8
mybatis-plus:
  global-config:
    db-config:
      logic-not-delete-value: 0 # mybatis-plus 逻辑删除
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 打印sql

dubbo:
  application:
    metadataType: remote
    register-mode: all
    service-discovery:
      migration: FORCE_APPLICATION
    name: api-core
    qos-accept-foreign-ip: true
  protocol:
    name: dubbo
    port: -1
    networker: net7
    host: ${host.tailscale}
  provider:
    networker: net7
    host: ${host.tailscale}
  registry:
    address: nacos://${host.nacos}
    # 这里注意 由于 3.X 的 bug 导致注册组不生效
    group: ${spring.profiles.active}
    # 由于 group 不生效 这里使用 namespace 将 dubbo 服务与 cloud 服务隔离
    # 否则会导致正常请求路由到 dubbo 服务报错
    parameters:
      # 注意 这里要在 nacos 创建名为 dubbo 的 namespace 环境
      namespace: b9970d70-8f1c-402e-b139-4a98f487c197
    preferred: true
  # 消费者相关配置
  consumer:
    # 支持校验注解
    validation: true
    # 超时时间
    timeout: 3000
    # 初始化检查
    check: false
  scan:
    # 接口实现类扫描
    base-packages: com.dhx.apicore.service

dhx:
  client:
    access-key: r3242rfj3w9r
    secret-key: g45hg34wrxsa
template:
  gen:
    doc-path: ../api-doc/docs/gen
    sdk-path: ../api-sdk/src/main/java/com/dhx/apisdk/client
alibaba:
  cloud:
    oss:
      endpoint: https://oss-cn-beijing.aliyuncs.com
      bucket: dhx-blog
      domain: https://oss.dhx.icu/
      access-key: LTAI5tPcnQEU3vr3Vss5Ax7n
      secret-key: NCySlHYxtHgEhM9CPg3sYv3va2Pbfj