host: 192.168.159.134
spring:
  application:
    name: api-core
  datasource:
    url: jdbc:mysql://${host}:3306/api-platform
    password: root
    username: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    # Redis服务器连接端口
    host: ${host}
    password: adorabled4
    # Redis数据库索引（默认为0）
    database: 1
    port: 6379
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 200
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0
  rabbitmq:
    username: dhx
    password: qwer
    host: ${host}
    port: 5672 # 端口
    virtual-host: / # 虚拟主机
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  cloud:
    nacos:
      discovery:
        server-addr: ${host}:8848
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
mybatis-plus:
  global-config:
    db-config:
      logic-not-delete-value: 0 # mybatis-plus 逻辑删除
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 打印sql
knife4j:
  enable: true
  openapi:
    title: api-platform_bankend
    description: 后端接口文档
    email: dhx2648466390@163.com
    concat: adorabled4
    url: https://blog.dhx.icu
    version: v4.0
    license: Apache 2.0
    license-url: https://blog.dhx.icu
    terms-of-service-url: https://blog.dhx.icu
    group:
      dev:
        group-name: 开发环境
        api-rule: package
        api-rule-resources:
          - com.dhx.apicore.controller
api:
  thread:
    core-size: 20
    max-size: 200
    keep-alive-time: 10

dubbo:
  application:
    # logger: logback
    # 元数据中心 local 本地 remote 远程 这里使用远程便于其他服务获取
    # 注意 这里不能使用 本地 local 会读取不到元数据
    metadataType: remote
    # 可选值 interface、instance、all，默认是 all，即接口级地址、应用级地址都注册
    register-mode: all
    service-discovery:
      # FORCE_INTERFACE，只消费接口级地址，如无地址则报错，单订阅 2.x 地址
      # APPLICATION_FIRST，智能决策接口级/应用级地址，双订阅
      # FORCE_APPLICATION，只消费应用级地址，如无地址则报错，单订阅 3.x 地址
      migration: FORCE_APPLICATION
  protocol:
    # 设置为 tri 即可使用 Triple 3.0 新协议
    # 性能对比 dubbo 协议并没有提升 但基于 http2 用于多语言异构等 http 交互场景
    # 使用 dubbo 协议通信
    name: dubbo
    # dubbo 协议端口(-1表示自增端口,从20880开始)
    port: -1
  # 注册中心配置
  registry:
    address: nacos://${host}:8848
    # 这里注意 由于 3.X 的 bug 导致注册组不生效
    group: dev
    # 由于 group 不生效 这里使用 namespace 将 dubbo 服务与 cloud 服务隔离
    # 否则会导致正常请求路由到 dubbo 服务报错
    parameters:
      # 注意 这里要在 nacos 创建名为 dubbo 的 namespace 环境
      namespace: b9970d70-8f1c-402e-b139-4a98f487c197
  # 消费者相关配置
  consumer:
    # 支持校验注解
    validation: true
    # 超时时间
    timeout: 3000
    # 初始化检查
    check: false
  scan:
    # 接口实现类扫描
    base-packages: com.dhx.apicore.service

dhx:
  client:
    access-key: r3242rfj3w9r
    secret-key: g45hg34wrxsa

# 阿里云 sms
sms:
  endpoint: dysmsapi.aliyuncs.com
  accessId: LTAI5t5tbAuGcFH8EtiepHQj
  accessKey: UJ6l8PO9eRZmrMWT4N96Ta3X9Tj6Sz
  commonSignName: 1111111111
  templateCodeTwo: 1111111111